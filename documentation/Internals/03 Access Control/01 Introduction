[emph]1.Terms[/emph]

    [emph]1.Basics[/emph]

    PHProjekt has a hierarchical projcet tree.
    Rights are applied to project nodes
    and to project node related items like e.g. todos, files, etc.

    Every item like an todo, a calendar entry, etc is owned by an project.
    Items without an project relation will be owned by the root project.
		
	Example:
        /ROOT
		  -> Project 1
			-> Project 3
			-> Project 4
				-> Project 5
		  -> Project 2

    [emph]2.RBAC: Role based access control[/emph]

    Roles are defined sets of (functional) permissions.

    Example:
		Rolename: 
			Senior Developer
		Rights:
            - Todos:
                - Read
                - Update
                - Access
                - Create
            - Files:
                - Read
                - Update

    [emph]2.1. Applying roles[/emph]

    Roles are applied to project nodes on a per user manner.
    For each project node and user there is a clear relation between

		PROJECT <-> USER <-> ROLE

    E.g.: a user has the role „Senior Developer“ on Project 1
    and the role „Administrator“ on Project 2.
    Role based access control is applied to all project related items of a project
    and are combined with DACs.

    [emph]2.2. Rights definition[/emph]
	
        Read:
            - The user is able to read items or project data
		Update:
            - The user is able to update / edit items or project data
		Access:
			- Passthrough right.
            The user has access to the project and subprojects
            In a hierarchical structure this means,
            that the user is able to see subnodes but isn't 
            able to read the node itself. A tree like 
				
				/ROOT
				-> Project 1  			(read, access)
					-> NOT VISIBLE 	    (access)
						-> Project 5    (read, access)
					->Project 4		    (read, access)
				-> Project 2			(read, access)

            will be displayed.
            If a user doesn't have access to a project node due to his role,
            he isn't allowed to view elements from the subtree even he has access rights there.

		Create:
            - The user is able to create new items
		Delete:
            - The user is able to delete items

    [emph]3.DAC: Discretionary access control[/emph]

        Per user based access control on an item.
        This control applies to particular items, 
        e.g. a calendar entry.
		
		Example:
			A user gets read, write access to an calendar entry.

			Project 1 
				TODO: Write a documentation
				Access rights for  „User 1“: read, write


[emph]2.How to know if a user has a access to an item: Combination of DAC and RBAC[/emph]

    At the moment we have role based access control (RBAC)
    that define a set of function rights
    applied to a user on a per project basis.
    Furthermore we have a finer granulated access 
    control on a per item basis using DACs.
    To find out if a user is able to read an item we have to combine both.

    Definition:

        The resulting access of an user is the intersection of both  access systems 
        DAC and RBAC.
        The intersection is build using the role definition for a user on 
        the project that owns the item and the item based access controls itself.

    This means, a user has only access to an project related item if his role allows him to
    read items and there is no item based restriction.

    To get concrete intersections between RBACs and DACs a clear mapping of 
    function rights (actions) like „create, access, write“ to DACs (read,write) are needed.
    Its defined as:

    -------------------------------------------------------------------------
    |           |       Read        |       Write       |       Admin       |
    -------------------------------------------------------------------------
    |   read    |        X          |                   |                   |
    -------------------------------------------------------------------------
    |   update  |                   |         X         |                   |
    -------------------------------------------------------------------------
    |   access  |        X          |                   |                   |
    -------------------------------------------------------------------------
    |   create  |                   |         X         |                   |
    -------------------------------------------------------------------------
    |   copy    |                   |         X         |                   |
    -------------------------------------------------------------------------
    |   delete  |                   |         X         |                   |
    -------------------------------------------------------------------------
    |  download |        X          |                   |                   |
    -------------------------------------------------------------------------

	Examples:
		The following role defined:
		
		Senior Developer:
			Todo: (read, write, access)
			Files: (read, access)

		User 1 is a
			Senior developer on Project 1

		In the Project 1 there are the following todos:
            1.Write a documentation		to be done on 06.05.2006
            There is no user specified access on this todo

            2.Buy a new PC			to be done on 06.06.2006
            No access

            3.Call Mr. Hanson			to be done on 04.05.2006
            User 1 has read access on this todo

		And the following files:
            1.Project_Concept.doc
                User 1 has read, write access on this file

		So the resulting access for an item are:
		
        	On todo 1 „Write a documentation“ the User 1 can
			read, write the item and has access to them, as there is no item
			based entry.

			On todo 2 „Buy a new PC“ the User 1 can
			do nothing:
			DACs: 	none 	 		    => R1 = {}
			RBAC: 	read,write,access	=> R2 = {read,write,access}

            R1 intersection R2 = {}
			

			On todo 3 „Call Mr. Hamson“ the User 1 can
			read:
			DACs: 	read	 		    => R1 = {read}
			RBAC: 	read,write,access	=> R2 = {read,write,access}

            R1 intersection R2 = {read}
			

			On file „Project_Concept.doc“ the User 1 can
			read:
			DACs: 	read,write		=> R1 = {read,write}
			RBAC: 	read,access		=> R2 = {read,access}

            R1 intersection R2 = {read}
