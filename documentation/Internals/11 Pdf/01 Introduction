Php library for creating PDF documents with tables. Library use Zend framework functionality for PDF documents,
providing with additional not implemeted function in Zend for drawing tables.

Autor: Alesia Khizhko <alesia.khizhko@mayflower.de>

Document contain more detailed information about Phprojekt_Pdf_Page usage, particulary applyPrototype() function.

Content.
1. Param of the function Phprojekt_Pdf_Page::applyPrototype() .
1.1. Specification of table element.
1.2. Specification of Free text  element.
1.3. Specification of Info box  element.
2. Example of usage.



1. Param of the function Phprojekt_Pdf_Page::applyPrototype() .

Prototype has a form of array, where some fields have specific form.

Obligation fields are:
1.font –(optional)  type of string, contain the name of the font
2.fontSize – (optional) type of int, contain font size
3.Elements to parse.
For example:

array(
   'font' => 'Helvetica',
   'fontSize' => 10,
    0 => array(....),
    1 => array(....),
        …
);

Each element for parsing is an array. There are 3 type of elements.

1.1. Specification of table in $prototype.

Array of element should contain following keys:
type - with value 'table', which defines a type of the element,

startX and startY  - (optional) values of type int, define coordinates of left top corner of the table

rows – value is an array, where every row contain array of columns

fontSize – (optional) change font size for the free text
lineWidth – (optional) change width of lines for the free text

For example:

array( 'type' =>'table',
       'startX'=> 35,
       'startY'=> 160,
       'rows'  => array(
           array(...array of columns...),
           array(...array of columns...))
)

Column has type of array with following rows:
1.text – type of text
2.width – type of int, width of the column
3.alignment (optional) – type of string, left is by default

For example:
array('text' => 'Datum', 'width' => 50);

1.2. Specification of Free text in $prototype.

Array of element should contain following keys:
type -  with a value  'freetext',which defines a type of the element,

startX and startY -  (optional) values of type int, define coordinates of left top corner of the Free text block

lines – value is array of strings, where every string would be inserted from the new line

fontSize – (optional) change font size for the free text
lineWidth – (optional) change width of lines for the free text

For example:

array(
     'type' => 'freetext',
     'startX'=> 35,
     'startY'=> 140,
     'lineWidth' => 0.5,
     'fontSize' => 12,
     'lines' => array('First line free text', 'Second line free text')
),

1.3. Specification of Info box in $prototype.

Info box is acually a simple table with one column and two rows, which can be processed quicker.
Infobox doesn't check if textline would fit inside.

Array of element should contain following keys:
type - with value 'infobox', which defines a type of the element,

startX and startY - (optional) values of type int, define coordinates of left top corner of the Info box
width and height  values of type int – define size of the Info box

header – type of string, define header
lines – array of strings, where every string would be inserted from the new line

fontSize – (optional) change font size for the free text
lineWidth – (optional) change width of lines for the free text

For example:

array(
      'type' => 'infobox',
      'startX'=> 300,
      'startY'=> 140,
      'lineWidth' => 0.5,
      'fontSize' => 10,
      'width' => 200,
      'height' => 50,
      'header' => 'Info box header',
      'lines' => array('First line info box', 'Second line info box')
),


2. Example of usage.

<?php
$pdf  = new Zend_Pdf();
$page = new Phprojekt_Pdf_Page(Zend_Pdf_Page::SIZE_LETTER);

$prototype = array(
    'font'     => 'Helvetica',
    'fontSize' => 10,
    0 => array(
        'type' => 'table',
        'rows' => array(
            array(
                array('text' => 'Datum', 'width' => 50, 'align' => 'center'),
                array('text' => '06.05.2009', 'width' => 150),
                array('text' => 'Naechster Termin', 'width' => 100),
                array('text' => '12.05.2009', 'width' => 100)),
            array(
                array('text' => 'Datum', 'width' => 50, 'align' => 'right'),
                array('text' => '12.05.2009', 'width' => 150),
                array('text' => 'Naechster Termin', 'width' => 100),
                array('text' => '15.05.2009', 'width' => 100)),
        )
    ),
    1 => array(
        'type'   =>'table',
        'startX' => 35,
        'startY' => 160,
        'rows'   => array(
            array(
                array('text' => 'Datum', 'width' => 50),
                array('text' => '06.05.2009', 'width' => 150)),
            array(
                array('text' => 'Naechster Termin', 'width' => 50),
                array('text' => '12.05.2009', 'width' => 150)),
        )
    ),
    2 => array(
        'type'      => 'freetext',
        'startX'    => 35,
        'startY'    => 140,
        'lineWidth' => 0.5,
        'fontSize'  => 12,
        'lines'     => array('First line free text', 'Second line free text')
    ),
    3 => array(
        'type'      => 'infobox',
        'lineWidth' => 0.5,
        'fontSize'  => 10,
        'width'     => 200,
        'height'    => 50,
        'header'    => 'Info box header',
        'lines'     => array('First line info box', 'Second line info box')
    )
);

$pages = $page->applyPrototype($prototype);

$pdf->pages[] = $page;
foreach($pages as $page) {
    $pdf->pages[] = $page;
}

$pdf->save('Testname.pdf');
?>


This code would create test pdf file with 2 tables, free text with 2 lines and info box.
