The first thing that has to be done is creating our database tables.
We use our favorite tool to create the following table:

(If you use MySQL, make sure that PHProjekt was installed using
InnoDB tables and that you create the example table using InnoDB.
If necessary specifiy ENGINE=InnoDB)

The name of the table and the fields are CamelCase,
so for the module WorkingHours, the table will be working_hours.

[code]
CREATE TABLE `working_hours` (
  `id`         int(11) NOT NULL AUTO_INCREMENT,
  `owner_id`   int(11) default NULL,
  `project_id` int(11) default NULL,
  `start_date` date NOT NULL,
  `start_time` time NOT NULL,
  `end_date`   date NOT NULL,
  `end_time`   time NOT NULL,
  PRIMARY KEY (`id`)
) CHARACTER SET utf8 COLLATE utf8_general_ci;
[/code]

The module must contain a primary key called id, and the fields owner_id and project_id.

PHProjekt use the table database_manager for know about the module fields,
the table have the next fields:

 - tableName     = Name of the module and the table of the module.
 - tableField    = Name of the field in the table.
 - formTab       = Number of the tab to show it in various tabs.
 - formLabel     = Text to display in the form (english text that is translated later).
 - formType      = Type of the field.
 - formPosition  = Position of the field in the form.
 - formColumns   = Number of columns that use the field. (Not implemented)
 - formRegexp    = Regular Expression to check the field. (Not implemented)
 - formRange     = Mix value to make the data of the fields, like for select types.
 - defaultValue  = Default value.
 - listPosition  = Position of the field in the list.
 - listAlign     = Aligment of the field in the list. (left/center/right)
 - listUseFilter = Use the field in the filter list or not.
 - altPosition   = Position of the field in the alt view.
 - status        = Active or Inactive field.
 - isInteger     = Int field or not.
 - isRequired    = Is it a required field or not.
 - isUnique      = Is it a unique value that can not be repeated or not.

PHProjekt have the next formType defined:
 - selectValues
 - multipleSelectValues
 - display
 - upload
 - checkbox
 - date
 - time
 - textarea
 - password
 - percentage
 - hidden
 - text

So, let´s fill the table for our module.

[code]
INSERT INTO `database_manager` (
`id`, `table_name`, `table_field`, `form_tab`, `form_label`, `form_type`,
`form_position`, `form_columns`, `form_regexp`, `form_range`, `default_value`, `list_position`, `list_align`,
`list_use_filter`, `alt_position`, `status`, `is_integer`, `is_required`, `is_unique`) VALUES

(0, 'WorkingHours', 'start_date',  1, 'Start date',    'date',         1, 1, NULL, NULL,               NULL,   1,
    'left',     1, 1, '1', 0, 1, 0),
(0, 'WorkingHours', 'start_time',  1, 'Start time',    'time',         2, 1, NULL, NULL,               NULL,   2,
    'center',   1, 2, '1', 0, 1, 0),
(0, 'WorkingHours', 'end_date',    1, 'End date',      'date',         3, 1, NULL, NULL,               NULL,   3,
    'left',     1, 3, '1', 0, 1, 0),
(0, 'WorkingHours', 'end_time',    1, 'End time',      'time',         4, 1, NULL, NULL,               NULL,   4,
    'center',   1, 4, '1', 0, 1, 0),
(0, 'WorkingHours', 'project_id',  1, 'Project',       'selectValues', 5, 1, NULL, 'Project#id#title', '1',    0,
    NULL,       1, 0, '1', 1, 1, 0);
[/code]

Now we need to let know PHProjekt that the module exists, so we can add:

[code]
INSERT INTO `module` (`id`, `name`, `label`, `save_type`, `version`, `active`) VALUES
(0, 'WorkingHours', 'Working Hours', 0, '6.0.0', 1);
[/code]

save_type can be 0 for modules under projects (normal)
or 1 for global modules (in fact are under the project 1)

We need to know wich module id we have in the module table, let thinks that the new id is 33.

The last part is to set the correct access to the module, at least to the project 1.

For allow the module into the project 1.
[code]
INSERT INTO `project_module_permissions` (`module_id`, `project_id`) VALUES
(33, 1);
[/code]

For add the module into the "role 1" (allow all).
[code]
INSERT INTO `role_module_permissions` (`role_id`, `module_id`, `access`) VALUES
(1, 33, 139);
[/code]

Thats everthing we need from our database. Let's pass over and create our necessary files
(All these database stuff are made with the Db.json file in the setup).
