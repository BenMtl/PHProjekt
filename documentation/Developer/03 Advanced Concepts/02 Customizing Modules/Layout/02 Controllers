[emph]Structure of Classes[/emph]

-------------------------------------------------------------------
	Default Controllers
        
                        --------------------
                        |  IndexController |
                        --------------------
                                  |
    --------------------          |          --------------------
    | FormViewRenderer |          |          | ListViewRenderer |
    --------------------          |          --------------------
                                  |
----------------------------------|--------------------------------
	Project Controllers           |
                                 \|/
                        --------------------
                        |  IndexController |
                        --------------------

Since in the phprojekt we have 3 separated views,
we use the IndexController for make all the views.

So, the indexController have all the functions actions for draw the list,
tree and form views.

For extend the controllers for all the modules,
the IndexController of each module must be and extension
of the Default IndexController

The IndexController use the Model class of the module for do the real job,
like example the save.
Since the  Project/Model/Project.php is an ActiveRecord,
the save is do it by the Project itself.
If the process return an exception,
the IndexControlelr with catch it and show the error.

The IndexController use the classes ListViewRender and FormViewRender
for get all the data to render
and have functions to draw it, like the form inputs.
You can assign to these helpers the model class that you want to use.

The function that use the IndexController for draw the views are:

getListView() -> Get the list data using the ListViewRender
getFormView() -> Get the form data using the FormViewRender
getTreeView() -> Get the tree data for draw

_generateOutput() -> Assign all the vars to the template

The Default IndexController have a function structure like this:

[code]
    public function addFilterAction ()
    {
    }
[/code]

Where the action var is "addFilter" and the Action is needed by the system

If you want to add some special view in some module,
you only need to extend
the IndexController of this module
and redefine the function _generateOuput adding the new view.
(And of course is there are a new part of the template,
you can change it in index.tpl)

Since there is one controller for all the options,
is not needed the controller in the URL,
so we use the url like module/action/params
Where params can be /id/5 => id = 5
